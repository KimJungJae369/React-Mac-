import React from 'react'

const React = () => {
    return (
        <>
            {/* 
                <React>
                = 사용자 인터페이스(UI : User Interface)를 구축하기 위한 JavaScript 라이브러리
                    <사용자 인터페이스> 
                    = 사용자가 컴퓨터, 모바일 기기, 소프트웨어 애플리케이션과 상호작용하는 시각적 요소와 레이아웃
                    = 버튼, 아이콘, 메뉴, 폼, 레이아웃 구조 등
                    = 사람이 컴퓨터나 프로그램을 쉽게 쓰도록 도와주는 화면,버튼,메뉴같은 요소 
                    = 사용자(사람) -> 시스템(컴퓨터) 사이에서 소통하는 매개체 역할
                = 공식적으로 '프레임워크'가 아닌 '라이브러리'로 분류    
                    <프레임워크,라이브러리>
                    프레임워크 : 집짓는 뼈대(규칙과 구조가 정해져 있고 그 안에서 필요한 부분만 사용) : 법이나 규칙이 정해져서 그 안에 있는 법이나 규칙만 사용한다
                    라이브러리 : 도구상자(필요한 기능을 골라서 사용) : 법이 없는 자유롭고 편하게 사용한다

                1. 리액트의 철학
                = 2013년 당시 많은 웹 개발자는 'JQuery','AngularJS'와 같은 도구를 활용해 '명령형 프로그램밍 방식'을 사용
                = 이런 방식은 복잡한 애플리케이션에서는 점점 관리가 어려움을 겪는다
                = 이런 상황에서 등장한 리액트는 선언적이며 컴포넌트 기반의 접근 방식
                    <장점>
                    (1) 더 나은 코드 구조
                    (2) 쉽게 유지보수
                    (3) 재사용성 향상
                    (4) 성능 최적화
                    (5) 대규모 애플리케이션 개발에 적합
                = '모든 UI를 컴포넌트로 바라본다'는 리액트의 관점

                2. 컴포넌트 기반 아키텍처 
                = 복잡한 UI를 작고 재사용 가능한 컴포넌트로 나누어 개발
                = 레고 블록을 조립하듯이 작은 컴포넌트들을 조립해 웹 페이지 하나를 완성
                = 이러한 방식은 코드의 재사용성을 높이고 유지보수하기 쉽게 만들어 준다
                    <아키텍처>
                        DOM : 현재문서(html,코딩)의 구조(작은 범위)
                        아키텍처 : 시스템 전체(모든 프로그램 언어 포함)의 구조(큰 범위) / 모든 프로그램을 감싸는 부모   
                    <컴포넌트>
                        컴포넌트란 : 독립적이고 재사용 가능한 UI 구성 요소
                        컴포넌트의 종류 : 함수형 컴포넌트, 클래스형 컴포넌트(옛날방식)
                        컴포넌트의 특징 : 독립적, 재사용 가능, 계층적 구조, 상태와 속성 관리
                        컴포넌트의 역할 : UI 구성, 상태 관리, 이벤트 처리, 데이터 전달
                        컴포넌트의 장점 : 재사용성, 유지보수 용이, 코드 가독성 향상, 테스트 용이
                = 리액트는 이러한 컴포넌트 기반 아키텍처를 통해 복잡한 UI를 효율적으로 관리하고 개발할 수 있도록 돕는다
                
                3. 가상 DOM
                = 자바스크립트나 Jquery 기반의 웹 개발에서는 화면에 표시하는 요소를 지접 DOM에 접근해 조작
                = 이 방식은 '렌더링 비용이 매우 높다'는 단점
                = '렌더링은 화면에 표시할 내용을 생성하고 그리는 과정 렌더링 비용이 높다는 것은 화면을 다시 그릴 때 시간, CPU, 메모리 자원을 많이 소모한다는 의미
                = 특히 DOM 트리 구조로 깊게 구성된 경우 일부 요소만 변경하더라고 전체 하위 요소를 모두 다시 그리는 경우 많아 성능 저하로 이어진다
                = '리액트'는 이러한 문제를 해결하기 위해 '가상DOM'이라는 개념을 도입
                = '가상DOM'은 실제 DOM을 복사한 자바스크립트 객체 형태의 트리 구조로 메모리에서 관리
                = '디핑' 결과에 따라 실제DOM에는 변경한 부분만 최소한으로 업데이트하면 이 과정을 '재조정'이라고 한다
                
                <디핑과정>
                1) 실제 화면에 구성 요소를 추가하거나 변경하면 리액트는 이를 '가상DOM'에 먼저 반영
                2) 모든 추가 및 변경이 끝난 뒤에 '가상DOM'과 '실제DOM'을 비교한다

                4. 선언적 프로그램
                <명령형 프로그래밍>
                = 자바스크립트나 Jquery와 같은 웹 개발 도구는 대부분 '명령형 프로그래밍'방식을 사용
                = 이는 UI를 만들때 '어떻게 변경할지'를 작성하는 방식
                = 예를 들어 명령형 방식에서는 화면에 표시된 숫자를 증가시키기 위해 모든 단계를 개발자가 직접 코드를 작성
                = 숫자를 직접 1씩 증가시키고 증가한 값을 화면에 반영하도록 코드를 작성
                = 명령형 방신은 변수 값 변경과 DOM 업데이트를 모두 직접 처리 
                ex)
                    const increment = () => {
                        count += 1;
                        document.getElementById('countDisplay').innerText = `count: ${count}`;
                    };

                <선언적 프로그래밍>
                = 리액트는 '선언적 프로그래밍'방식
                = 이는 UI를 만들때 '무엇을 보여줄지'를 선언하는 방식
                = 선언형 방식에서는 화면에 출력하는 숫자를 1씩 증가시키고 싶다면 단순하게 숫자만 1을 증가시키면 됩니다 즉 숫자 값을 바꾸는 상태(state)만 변경하면 된다 증가한 숫자를 화면에 반영하는 것은 리액트가 내부적으로 알아서 처리
                = UI를 집접 조작할 필요 없이 상태만 관리하면 되기 때문에 코드는 더 간결하고 직관적
                ex)
                    export default function Counter() {
                        const [count,setCount] = useState(0); // count라는 상태를 0으로 초기화
                        const increment = () => { // 버튼 클릭시 count 상태를 1 증가(업데이트)하는 함수
                            setCount(count + 1); // 상태 업데이트
                        }
                            ...

                5. 리액트의 특징
                = 리액트는 유연하고 강력한 특징들 덕분에 생산성, 유지보수, 성능, 황장성 면에서 뛰어난 프런트엔드 도구

                <단반향 데이터 흐름>
                = 리액트는 '단방향 데이터 흐름'을 채택
                = 데이터가 부모 컴포넌트에서 자식 컴포넌트로만 흐르고 자식 컴포넌트는 부모의 상태를 직접 변셩할 수 없는 구조
                = 이러한 구조는 데이터의 흐름을 예측 가능하게 만들어 디버깅과 유지보수를 쉽게 한다
                    <장점>
                    = 데이터 흐름을 예측하기 쉽다
                    = 상태 변화를 추적하기 용이하다
                    = 대규모 애플리케이션에서도 복잡성을 줄일 수 있다
                    = 애플리케이션의 동작을 명확히 이해할 수 있다

                <JSX 사용>
                = 리액트에서 사용하는 문법확장
                = html과 유사한 형태로 UI를 정의할 수 있다
                = 더욱 가독성 높고 직관적이며 자바스크립트의 기능과도 자유롭게 결합할 수 있다
                = JSX는 자바스크립트 코드 안에 HTML 구조를 직접 작성할 수 있게 해주며, 이를 통해 UI 구성 요소를 더 쉽게 만들고 관리할 수 있다

                <상태 관리 도구 제공>
                = 컴포넌트의 상태를 효과적으로 관리할 수 있도록 다양한 기능의 훅을 제공
                = 함수형 컴포넌트에서 상태를 관리하고, 생명주기와 관련한 기능을 사용
                = Content API(컴포넌트 간에 데이터를 전달)를 사용하면 전역 상태를 관리하고 여러 컴포넌트 간 데이터를 쉽게 공유
                = 더 복잡한 상태 관리가 필요한 경우 'Redux', 'MobX'와 같은 외부 라이브러리와도 쉽게 통합

                <풍부한 생태계>
                1) Next.js / Gatsby : 리액트를 기반으로 한 프레임워크로 서버 사이드 렌더링, 정적 사이트 생성을 지원하며 검색 엔진 최적화와 초기 로딩 속도를 향상
                2) React Native : 리액트의 개념과 문법을 사용해 모바일 애플리케이션을 개발할 수 있는 프레임워크 / 하나의 코드 베이스로 iOS와 Android 애플리케이션을 동시에 개발할 수 있는 모바일 프레임워크
                3) 상태 관리 라이브러리 : Redux, MobX, Recoil 등 다양한 상태 관리 라이브러리가 리액트와 함께 사용되어 복잡한 애플리케이션의 상태를 효율적으로 관리
                4) UI 컴포넌트 라이브러리 : Material UI, Chackra UI, Ant Design 등 다양한 UI 컴포넌트 라이브러리가 리액트와 함께 사용되어 일관된 디자인과 빠른 개발을 지원

                <리액트의 발전>
                리액트 등장(2013 : 컴포넌트와 가상DOM의 혁신) -> 리액트16(2017 : 혁신의 전환점 안전성과 유연성 확보) -> 리액트18(2022 : 동시성과 성능의 진화) -> 리액트19(2024 : 새로운 가능성의 시작) 

                    <동시성과 성능의 진화>
                    = 동시성 렌더링 : 여러 작업을 동시에 처리해 UI 반응성 개선
                    = 자동배치 : 여러 상태를 업데이트를 자동으로 하나의 렌더링으로 묶어 성능 최적화
                    = 서버 컴포넌트 : 서버에서 일부 UI를 렌더링으로 묶어 성능 최적화
            */}
        </>
    )
}

export default React