import React from 'react'
import Header from './Header'
import Main from './Main'
import Footer from './Footer'
import Nav from './Nav'

export default function Component6() {
    return (
        <>
            <Header />
            <Main />
            <Footer />
        </>
    )
}


/*
    <컴포넌트 트리>
    = 리액트 애플리케이션은 App 컴포넌트에 여러 하위 컴포넌트를 포함하면서 전체 UI를 구성
    = 즉 하나의 컴포넌트 안에 또 다른 컴포넌트를 포함하는 방식으로 계층적 구조가 형성
    = 이렇게 컴포넌트들이 연결된 구조를 '컴포넌트 트리'라고 한다
    = App 컴포넌트(부모 컴포넌트)는 리액트 애플리케이션에서 가장 바깥쪽에서 위치하는 컴포넌트이다 그래서 App를 '루트 컴포넌트'라고 한다
    = App을 루트로 해 Header, Main, Footer가 자식 컴포넌트로 포함된 형태
                    App
            Header Main Footer
            Nav
    
    = 리액트에서는 컴포넌트가 어디에서 렌더링되는지에 따라 컴포넌트 트리에서의 위치가 결정
    = 즉 컴포넌트 간 포함 관계에 따라 트리가 구성되며 이 구조는 애플리케이션의 동작 방식과 데이터 흐름에 중요한 영향
    = '컴포넌트 트리' 구조는 복잡한 UI를 작고 독립적인 단위로 분리하고 각 컴포넌트 간 관게를 명확하게 표현한다
    = 이 덕분에 리액트 애플리케이션은 전체 구조를 이해하귀 쉽고 기능별로 코드가 잘 나뉘어 있어 유지보수와 확장이 매우 수월하다

    <요약>
    1. 계층구종
    = 컴포넌트는 부모 -> 자식 관계의 계층 구조
    = 부모 컴포넌트는 여러 자식 컴포넌트를 포함할 수 있으며 자식 컴포넌트는 특정 부모 안에서 렌더링이 된다
    = HTML에서는 형제 태그가 존재하지만 리액트 컴포넌트에는 형제 관계라는 개념은 없다

    2. 단방향 데이터 흐름
    = 리액트에서는 데이터가 항상 부모에서 자식으로만 흐른다
    = 부모 컴포넌트는 'props'를 통해 자식에게 데이터를 전달할 수 있지만 자식 컴포넌트는 부모의 데이터를 직접 변경할 수 없다
        Tip) props(properties)
            - 부모 컴포넌트가 자식 컴포넌트에 전달하는 데이터 
            - 함수의 매개변수 처럼 자식 컴포넌트는 전달받아 'props'를 사용해 화면에 표시할 내용을 바꾸거나 동작을 제어할 수 있다
    
    3. 재사용성
    = 한 번 정의한 컴포넌트는 여러 위치에서 반복해서 사용할 수 있다
    = 이를 통해 코드의 중복을 줄이고 유지보수를 쉽게 할 수 있다

    4. 상태관리
    = 각 컴포넌트는 자신만의 상태(state)를 가질 수 있다
    = 상태가 변경되면 해당 컴포넌트는 자동으로 리랜더링되어 UI에 새로운 상태를 반영
    = 이 상태 변화는 컴포넌트 트리 하위에 있는 자식 컴포넌트에 영향을 줄 수 있다

    5. 랜더링 최적화
    = 리액트는 '가상 DOM'을 사용해 '실제 DOM'과의 차이를 비교한 뒤 변경된 부분만 최소한으로 업데이트
    = 빠르고 효율적인 랜더링
*/